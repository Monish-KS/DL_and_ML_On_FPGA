// -------------------------------------------------------------
// 
// File Name: hdlsrc\DNN_Simulation_Model\DNN_Subsystem.v
// Created: 2024-08-06 14:40:13
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.1
// Target subsystem base rate: 0.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DNN_Subsystem
// Source Path: DNN_Simulation_Model/DNN_Subsystem
// Hierarchy Level: 0
// Model version: 1.24
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DNN_Subsystem
          (X_0,
           X_1,
           X_2,
           X_3,
           X_4,
           X_5,
           X_6,
           X_7,
           yprd);


  input   signed [11:0] X_0;  // sfix12_En11
  input   signed [11:0] X_1;  // sfix12_En11
  input   signed [11:0] X_2;  // sfix12_En11
  input   signed [11:0] X_3;  // sfix12_En11
  input   signed [11:0] X_4;  // sfix12_En11
  input   signed [11:0] X_5;  // sfix12_En11
  input   signed [11:0] X_6;  // sfix12_En11
  input   signed [11:0] X_7;  // sfix12_En11
  output  yprd;  // ufix1


  wire signed [4:0] b5_out1;  // sfix5_En3
  wire signed [5:0] W3_out1 [0:3];  // sfix6_En2 [4]
  wire signed [4:0] b2_out1 [0:3];  // sfix5_En2 [4]
  wire signed [4:0] c20_W2_out1 [0:11];  // sfix5_En2 [12]
  wire signed [4:0] W2_out1 [0:3] [0:2];  // sfix5_En2 [4x3]
  wire signed [4:0] b1_out1 [0:2];  // sfix5_En2 [3]
  wire signed [4:0] c18_W1_out1 [0:23];  // sfix5_En2 [24]
  wire signed [4:0] W1_out1 [0:2] [0:7];  // sfix5_En2 [3x8]
  wire signed [15:0] ytan_0;  // sfix16_En14
  wire signed [15:0] ytan_1;  // sfix16_En14
  wire signed [15:0] ytan_2;  // sfix16_En14
  wire signed [15:0] ytan_0_1;  // sfix16_En14
  wire signed [15:0] ytan_1_1;  // sfix16_En14
  wire signed [15:0] ytan_2_1;  // sfix16_En14
  wire signed [15:0] ytan_3;  // sfix16_En14
  wire signed [15:0] ytan;  // sfix16_En14
  wire Threshold_out1;  // ufix1_En1


  assign b5_out1 = 5'sb10100;


  assign W3_out1[0] = 6'sb111101;
  assign W3_out1[1] = 6'sb111101;
  assign W3_out1[2] = 6'sb110111;
  assign W3_out1[3] = 6'sb101111;


  assign b2_out1[0] = 5'sb10111;
  assign b2_out1[1] = 5'sb11101;
  assign b2_out1[2] = 5'sb00100;
  assign b2_out1[3] = 5'sb01000;


  assign c20_W2_out1[0] = 5'sb00111;
  assign c20_W2_out1[1] = 5'sb00010;
  assign c20_W2_out1[2] = 5'sb00100;
  assign c20_W2_out1[3] = 5'sb01001;
  assign c20_W2_out1[4] = 5'sb11101;
  assign c20_W2_out1[5] = 5'sb11111;
  assign c20_W2_out1[6] = 5'sb11110;
  assign c20_W2_out1[7] = 5'sb00110;
  assign c20_W2_out1[8] = 5'sb00101;
  assign c20_W2_out1[9] = 5'sb10111;
  assign c20_W2_out1[10] = 5'sb11000;
  assign c20_W2_out1[11] = 5'sb00010;


  generate
    genvar idx3;
    for(idx3 = 0; idx3 < 3; idx3 = idx3 + 1) begin : W2_out1_gen1
      genvar idx2;
      for(idx2 = 0; idx2 < 4; idx2 = idx2 + 1) begin : W2_out1_gen
        assign W2_out1[idx2][idx3] = c20_W2_out1[idx2 + (idx3 * 4)];
      end
    end
  endgenerate

  assign b1_out1[0] = 5'sb11001;
  assign b1_out1[1] = 5'sb00010;
  assign b1_out1[2] = 5'sb10111;


  assign c18_W1_out1[0] = 5'sb11101;
  assign c18_W1_out1[1] = 5'sb11110;
  assign c18_W1_out1[2] = 5'sb11111;
  assign c18_W1_out1[3] = 5'sb10110;
  assign c18_W1_out1[4] = 5'sb11010;
  assign c18_W1_out1[5] = 5'sb11011;
  assign c18_W1_out1[6] = 5'sb00110;
  assign c18_W1_out1[7] = 5'sb00001;
  assign c18_W1_out1[8] = 5'sb11110;
  assign c18_W1_out1[9] = 5'sb00010;
  assign c18_W1_out1[10] = 5'sb11111;
  assign c18_W1_out1[11] = 5'sb00010;
  assign c18_W1_out1[12] = 5'sb00001;
  assign c18_W1_out1[13] = 5'sb00000;
  assign c18_W1_out1[14] = 5'sb00001;
  assign c18_W1_out1[15] = 5'sb11110;
  assign c18_W1_out1[16] = 5'sb11011;
  assign c18_W1_out1[17] = 5'sb00000;
  assign c18_W1_out1[18] = 5'sb11100;
  assign c18_W1_out1[19] = 5'sb00000;
  assign c18_W1_out1[20] = 5'sb00001;
  assign c18_W1_out1[21] = 5'sb11001;
  assign c18_W1_out1[22] = 5'sb00011;
  assign c18_W1_out1[23] = 5'sb11111;


  generate
    genvar idx1;
    for(idx1 = 0; idx1 < 8; idx1 = idx1 + 1) begin : W1_out1_gen1
      genvar idx;
      for(idx = 0; idx < 3; idx = idx + 1) begin : W1_out1_gen
        assign W1_out1[idx][idx1] = c18_W1_out1[idx + (idx1 * 3)];
      end
    end
  endgenerate

  Hidden_Layer1 u_Hidden_Layer1 (.Bias_0(b1_out1[0]),  // sfix5_En2
                                 .Bias_1(b1_out1[1]),  // sfix5_En2
                                 .Bias_2(b1_out1[2]),  // sfix5_En2
                                 .Weight_0(W1_out1[0][0]),  // sfix5_En2
                                 .Weight_1(W1_out1[1][0]),  // sfix5_En2
                                 .Weight_2(W1_out1[2][0]),  // sfix5_En2
                                 .Weight_3(W1_out1[0][1]),  // sfix5_En2
                                 .Weight_4(W1_out1[1][1]),  // sfix5_En2
                                 .Weight_5(W1_out1[2][1]),  // sfix5_En2
                                 .Weight_6(W1_out1[0][2]),  // sfix5_En2
                                 .Weight_7(W1_out1[1][2]),  // sfix5_En2
                                 .Weight_8(W1_out1[2][2]),  // sfix5_En2
                                 .Weight_9(W1_out1[0][3]),  // sfix5_En2
                                 .Weight_10(W1_out1[1][3]),  // sfix5_En2
                                 .Weight_11(W1_out1[2][3]),  // sfix5_En2
                                 .Weight_12(W1_out1[0][4]),  // sfix5_En2
                                 .Weight_13(W1_out1[1][4]),  // sfix5_En2
                                 .Weight_14(W1_out1[2][4]),  // sfix5_En2
                                 .Weight_15(W1_out1[0][5]),  // sfix5_En2
                                 .Weight_16(W1_out1[1][5]),  // sfix5_En2
                                 .Weight_17(W1_out1[2][5]),  // sfix5_En2
                                 .Weight_18(W1_out1[0][6]),  // sfix5_En2
                                 .Weight_19(W1_out1[1][6]),  // sfix5_En2
                                 .Weight_20(W1_out1[2][6]),  // sfix5_En2
                                 .Weight_21(W1_out1[0][7]),  // sfix5_En2
                                 .Weight_22(W1_out1[1][7]),  // sfix5_En2
                                 .Weight_23(W1_out1[2][7]),  // sfix5_En2
                                 .X_0(X_0),  // sfix12_En11
                                 .X_1(X_1),  // sfix12_En11
                                 .X_2(X_2),  // sfix12_En11
                                 .X_3(X_3),  // sfix12_En11
                                 .X_4(X_4),  // sfix12_En11
                                 .X_5(X_5),  // sfix12_En11
                                 .X_6(X_6),  // sfix12_En11
                                 .X_7(X_7),  // sfix12_En11
                                 .ytan_0(ytan_0),  // sfix16_En14
                                 .ytan_1(ytan_1),  // sfix16_En14
                                 .ytan_2(ytan_2)  // sfix16_En14
                                 );
  Hidden_Layer2 u_Hidden_Layer2 (.Bias_0(b2_out1[0]),  // sfix5_En2
                                 .Bias_1(b2_out1[1]),  // sfix5_En2
                                 .Bias_2(b2_out1[2]),  // sfix5_En2
                                 .Bias_3(b2_out1[3]),  // sfix5_En2
                                 .Weight_0(W2_out1[0][0]),  // sfix5_En2
                                 .Weight_1(W2_out1[1][0]),  // sfix5_En2
                                 .Weight_2(W2_out1[2][0]),  // sfix5_En2
                                 .Weight_3(W2_out1[3][0]),  // sfix5_En2
                                 .Weight_4(W2_out1[0][1]),  // sfix5_En2
                                 .Weight_5(W2_out1[1][1]),  // sfix5_En2
                                 .Weight_6(W2_out1[2][1]),  // sfix5_En2
                                 .Weight_7(W2_out1[3][1]),  // sfix5_En2
                                 .Weight_8(W2_out1[0][2]),  // sfix5_En2
                                 .Weight_9(W2_out1[1][2]),  // sfix5_En2
                                 .Weight_10(W2_out1[2][2]),  // sfix5_En2
                                 .Weight_11(W2_out1[3][2]),  // sfix5_En2
                                 .X_0(ytan_0),  // sfix16_En14
                                 .X_1(ytan_1),  // sfix16_En14
                                 .X_2(ytan_2),  // sfix16_En14
                                 .ytan_0(ytan_0_1),  // sfix16_En14
                                 .ytan_1(ytan_1_1),  // sfix16_En14
                                 .ytan_2(ytan_2_1),  // sfix16_En14
                                 .ytan_3(ytan_3)  // sfix16_En14
                                 );
  OutputLayer u_OutputLayer (.Bias(b5_out1),  // sfix5_En3
                             .Weight_0(W3_out1[0]),  // sfix6_En2
                             .Weight_1(W3_out1[1]),  // sfix6_En2
                             .Weight_2(W3_out1[2]),  // sfix6_En2
                             .Weight_3(W3_out1[3]),  // sfix6_En2
                             .X_0(ytan_0_1),  // sfix16_En14
                             .X_1(ytan_1_1),  // sfix16_En14
                             .X_2(ytan_2_1),  // sfix16_En14
                             .X_3(ytan_3),  // sfix16_En14
                             .ytan(ytan)  // sfix16_En14
                             );
  assign Threshold_out1 = 1'b1;


  BinaryPrediction u_BinaryPrediction (.u(ytan),  // sfix16_En14
                                       .Thresh(Threshold_out1),  // ufix1_En1
                                       .yprd(yprd)  // ufix1
                                       );
endmodule  // DNN_Subsystem

